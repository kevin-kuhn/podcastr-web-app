UNIDADE DE MEDIDAS:
	REM - Cada 1 rem equivale ao tamanho do font size do meu root, do meu html(tag - padrao 16px) - root em
	EM - Pega o tamanho relativo do componente que ta em volta

	- se adaptam ao tamanho que o usuario utiliza em seu sistema operacional - acessibilidade

PAGES -> _app:
	é um arquivo que fica por volta de todas nossas paginas, toda vez que troco de pagina, o que ta dentro dele é recarregado.

Logo, para fazer algo de configuração no meu app, posso utilizar o _document -> ele é o respectivo do .html do react. Ele é sempre chamado uma vez

------------------
styles.module.scss -> o .module faz com que esse estilo nunca seja compartilhado com outros lugares na aplicação
o import fica - import styles from "./styles.module.scss"

-----------------
https://www.npmjs.com/package/json-server
- consigo fazer um api fake, com CRUD, com arquivos json

script - "server": "json-server server.json -w -d 750 -p 3333"
-w -> fica em watch modde, toda vez que trocar uma informação no servidor vai reiniciar
-d -> delay, nesse caso de 750 ms
-p -> porta que ele vai executar, nesse caso na 3333

--------------

webpagetest -> para testar performance

--------------
FORMATAÇÂO DE DADOS -> é bom fazer sempre antes de chegar no componente, pra evitar que algo desnecessario seja renderizado e executado novamente
	no rerender do componente. No caso da page do next, bom fazer no server side

--------------
Posso fazer prefetch no onMouseEnter no Link com o router do next, para a pagina que ele vai ser redirecionado. Dessa forma o conteúdo ja esta carregado
antes de clicar
---------------
PAGINAS ESTATICAS DINAMICAS: Quando vamos trabalhar com paginas estaticas dinamicas, ou seja, com getStaticProps, e a pagina nessecita de um slug, preciso usar
o getStaticPaths. Como a pagina é estatica e é gerada no momento da build, não tem como o next saber qual episodio, no caso, gerar de forma estatica.
vai me retornar quais episodios quero retornar de forma estatica no momento da build

export const getStaticPaths: GetStaticPaths = async () => {
	return {
		paths: [
			{ params: { slug: "a-importancia-da-contribuicao-em-open-source" } },
		],
		fallback: "blocking",
	}
}

	- nesse caso, ele gera de forma estatica esse episodio tambem, quando o path é vazio não gera de forma estatica nenhum.
	- Vai funcionar entrando na pagina, mesmo sem ter gerado de forma estatica, quando o fallback: "blocking", pois faz a requisição em server side
	  só vai para a pagina quando carregar, quando for false, ele vai dar 404 para todas as paginas dinamicas que nao foram geradas em build. 
	  Quando true, faz com que a chamada da pagina seja feita em client side

	- Posso fazer com que os episodios mais visitados, ou categorias, produto, etc mais acessados sejam gerados em tempo de build dessa forma

-----------------
& + span {} -> todos os spans, menos o primeiro em uma lista